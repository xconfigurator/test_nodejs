// Generated by CoffeeScript 1.12.4

/*
 * Copyright 2013-2017  Zaid Abdulla
 *
 * This file is part of GenieACS.
 *
 * GenieACS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * GenieACS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with GenieACS.  If not, see <http://www.gnu.org/licenses/>.
 *
 * This file incorporates work covered by the following copyright and
 * permission notice:
 *
 * Copyright 2013 Fanoos Telecom
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var DELETE_DEVICE_REGEX, DEVICE_TASKS_REGEX, FAULTS_REGEX, FILES_REGEX, OBJECTS_REGEX, PING_REGEX, PRESETS_REGEX, PROVISIONS_REGEX, QUERY_REGEX, USER_REGEX, TAGS_REGEX, TASKS_REGEX, VERSION, VIRTUAL_PARAMETERS_REGEX, apiFunctions, common, config, db, listener, mongodb, query, querystring, throwError, url, vm, MakeData;
var async = require('async');
url = require('url');
fs = require('fs');
mongodb = require('mongodb');

querystring = require('querystring');

vm = require('vm');

config = require('./config');

common = require('./common');

db = require('./db');

query = require('./query');
apiFunctions = require('./api-functions');
MakeData = require('./makedata');
VERSION = require('../package.json').version;

////////////////////////////////////////////////////////////////////
// ADD BY LIUYANG 2018/7/10 BEGIN
var upgrades = require('./nbi-upgrade-devices')
UPGRADES_REGEX = /^\/upgrades\/([a-zA-Z0-9\%\!\*\'\(\)\;\:\@\&\=\+\$\,\?\#\[\]\-\_\.\~]+)\/?$/;
// ADD BY LIUYANG 2018/7/10 END
////////////////////////////////////////////////////////////////////

DEVICE_TASKS_REGEX = /^\/devices\/([a-zA-Z0-9\-\_\%]+)\/tasks\/?$/;

TASKS_REGEX = /^\/tasks\/([a-zA-Z0-9\-\_\%]+)(\/[a-zA-Z_]*)?$/;

TAGS_REGEX = /^\/devices\/([a-zA-Z0-9\-\_\%]+)\/tags\/([a-zA-Z0-9\-\_\%]+)\/?$/;

PRESETS_REGEX = /^\/presets\/([a-zA-Z0-9\-\_\%]+)\/?$/;

OBJECTS_REGEX = /^\/objects\/([a-zA-Z0-9\-\_\%]+)\/?$/;

FILES_REGEX = /^\/files\/([a-zA-Z0-9\%\!\*\'\(\)\;\:\@\&\=\+\$\,\?\#\[\]\-\_\.\~]+)\/?$/;

PING_REGEX = /^\/ping\/([a-zA-Z0-9\-\_\.]+)\/?$/;
// chanag BY CHENCHEN 2018/06/13
//QUERY_REGEX = /^\/([a-zA-Z0-9_]+s)\/?$/;
QUERY_REGEX = /^\/query\/([a-zA-Z0-9_]+s)\/([a-zA-Z0-9_]+)\/?$/;

// ADD BY CHENCHEN 2018/06/28
USER_REGEX = /^\/users\/([a-zA-Z0-9_]+)\/?$/;

// ADD BY CHENCHEN 2018/07/02
BACKUP_REGEX = /^\/backup\/([a-zA-Z0-9_]+)\/?$/;

// ADD BY CHENCHEN 2018/07/02
SYSTELOG_REGEX = /^\/systemlogs\/([a-zA-Z0-9_]+)\/?$/;

DELETE_DEVICE_REGEX = /^\/devices\/([a-zA-Z0-9\-\_\%]+)\/?$/;

PROVISIONS_REGEX = /^\/provisions\/([a-zA-Z0-9\-\_\%]+)\/?$/;

VIRTUAL_PARAMETERS_REGEX = /^\/virtual_parameters\/([a-zA-Z0-9\-\_\%]+)\/?$/;

FAULTS_REGEX = /^\/faults\/([a-zA-Z0-9\-\_\%\:]+)\/?$/;

throwError = function (err, httpResponse) {
  if (httpResponse) {
    httpResponse.writeHead(500, {
      'Connection': 'close'
    });
    httpResponse.end(err.name + ": " + err.message);
  }
  throw err;
};

listener = function (request, response) {

  var bytes, chunks;
  chunks = [];
  bytes = 0;
  response.setHeader('GenieACS-Version', VERSION);
  request.addListener('data', function (chunk) {
    chunks.push(chunk);
    return bytes += chunk.length;
  });
  request.getBody = function () {
    var body, offset;
    body = new Buffer(bytes);
    offset = 0;
    chunks.forEach(function (chunk) {
      chunk.copy(body, offset, 0, chunk.length);
      return offset += chunk.length;
    });
    return body;
  };
  return request.addListener('end', function () {
    var action, body, channel, collection, collectionName, cur, deviceId, err, faultId, filename, gs, host, i, j, k, len, limit, metadata, object, objectName, p, preset, presetName, projection, provisionName, q, r, ref, ref1, s, sort, tag, task, taskId, up, urlParts, v, virtualParameterName;
    body = request.getBody();
    urlParts = url.parse(request.url, true);
    console.log(urlParts.pathname)
    console.log(QUERY_REGEX.test(urlParts.pathname))
    if (PRESETS_REGEX.test(urlParts.pathname)) {
      presetName = querystring.unescape(PRESETS_REGEX.exec(urlParts.pathname)[1]);
      if (request.method === 'PUT') {
        preset = JSON.parse(body);
        preset._id = presetName;
        return db.presetsCollection.save(preset, function (err) {
          if (err) {
            return throwError(err, response);
          }
          return db.redisClient.del('presets_hash', function (err) {
            if (err) {
              return throwError(err, response);
            }
            response.writeHead(200);
            return response.end();
          });
        });
      } else if (request.method === 'DELETE') {
        return db.presetsCollection.remove({
          '_id': presetName
        }, function (err) {
          if (err) {
            return throwError(err, response);
          }
          return db.redisClient.del('presets_hash', function (err) {
            if (err) {
              return throwError(err, response);
            }
            response.writeHead(200);
            return response.end();
          });
        });
      } else {
        response.writeHead(405, {
          'Allow': 'PUT, DELETE'
        });
        return response.end('405 Method Not Allowed');
      }
    } else if (OBJECTS_REGEX.test(urlParts.pathname)) {
      objectName = querystring.unescape(OBJECTS_REGEX.exec(urlParts.pathname)[1]);
      if (request.method === 'PUT') {
        object = JSON.parse(body);
        object._id = objectName;
        return db.objectsCollection.save(object, function (err) {
          if (err) {
            return throwError(err, response);
          }
          return db.redisClient.del('objects', 'presets_hash', function (err) {
            if (err) {
              return throwError(err, response);
            }
            response.writeHead(200);
            return response.end();
          });
        });
      } else if (request.method === 'DELETE') {
        return db.objectsCollection.remove({
          '_id': objectName
        }, function (err) {
          if (err) {
            return throwError(err, response);
          }
          return db.redisClient.del('objects', 'presets_hash', function (err) {
            if (err) {
              return throwError(err, response);
            }
            response.writeHead(200);
            return response.end();
          });
        });
      } else {
        response.writeHead(405, {
          'Allow': 'PUT, DELETE'
        });
        return response.end('405 Method Not Allowed');
      }
    } else if (PROVISIONS_REGEX.test(urlParts.pathname)) {
      provisionName = querystring.unescape(PROVISIONS_REGEX.exec(urlParts.pathname)[1]);
      if (request.method === 'PUT') {
        object = {
          _id: provisionName,
          script: body.toString()
        };
        try {
          new vm.Script("\"use strict\";(function(){\n" + object.script + "\n})();");
        } catch (error) {
          err = error;
          response.writeHead(400);
          response.end(err.name + ": " + err.message);
          return;
        }
        return db.provisionsCollection.save(object, function (err) {
          if (err) {
            return throwError(err, response);
          }
          return db.redisClient.del('presets_hash', function (err) {
            if (err) {
              return throwError(err, response);
            }
            response.writeHead(200);
            return response.end();
          });
        });
      } else if (request.method === 'DELETE') {
        return db.provisionsCollection.remove({
          '_id': provisionName
        }, function (err) {
          if (err) {
            return throwError(err, response);
          }
          return db.redisClient.del('presets_hash', function (err) {
            if (err) {
              return throwError(err, response);
            }
            response.writeHead(200);
            return response.end();
          });
        });
      } else {
        response.writeHead(405, {
          'Allow': 'PUT, DELETE'
        });
        return response.end('405 Method Not Allowed');
      }
    } else if (VIRTUAL_PARAMETERS_REGEX.test(urlParts.pathname)) {
      virtualParameterName = querystring.unescape(VIRTUAL_PARAMETERS_REGEX.exec(urlParts.pathname)[1]);
      if (request.method === 'PUT') {
        object = {
          _id: virtualParameterName,
          script: body.toString()
        };
        try {
          new vm.Script("\"use strict\";(function(){\n" + object.script + "\n})();");
        } catch (error) {
          err = error;
          response.writeHead(400);
          response.end(err.name + ": " + err.message);
          return;
        }
        return db.virtualParametersCollection.save(object, function (err) {
          if (err) {
            return throwError(err, response);
          }
          return db.redisClient.del('presets_hash', function (err) {
            if (err) {
              return throwError(err, response);
            }
            response.writeHead(200);
            return response.end();
          });
        });
      } else if (request.method === 'DELETE') {
        return db.virtualParametersCollection.remove({
          '_id': virtualParameterName
        }, function (err) {
          if (err) {
            return throwError(err, response);
          }
          return db.redisClient.del('presets_hash', function (err) {
            if (err) {
              return throwError(err, response);
            }
            response.writeHead(200);
            return response.end();
          });
        });
      } else {
        response.writeHead(405, {
          'Allow': 'PUT, DELETE'
        });
        return response.end('405 Method Not Allowed');
      }
    } else if (TAGS_REGEX.test(urlParts.pathname)) {
      r = TAGS_REGEX.exec(urlParts.pathname);
      deviceId = querystring.unescape(r[1]);
      tag = querystring.unescape(r[2]);
      if (request.method === 'POST') {
        return db.devicesCollection.update({
          '_id': deviceId
        }, {
            '$addToSet': {
              '_tags': tag
            }
          }, {
            safe: true
          }, function (err) {
            if (err) {
              return throwError(err, response);
            }
            return db.redisClient.del(deviceId + "_presets_hash", function (err) {
              if (err) {
                return throwError(err, response);
              }
              response.writeHead(200);
              return response.end();
            });
          });
      } else if (request.method === 'DELETE') {
        return db.usersCollection.update({
          '_id': deviceId
        }, {
            '$pull': {
              '_tags': tag
            }
          }, {
            safe: true
          }, function (err) {
            if (err) {
              return throwError(err, response);
            }
            return db.redisClient.del(deviceId + "_presets_hash", function (err) {
              if (err) {
                return throwError(err, response);
              }
              response.writeHead(200);
              return response.end();
            });
          });
      } else {
        response.writeHead(405, {
          'Allow': 'POST, DELETE'
        });
        return response.end('405 Method Not Allowed');
      }
    } else if (FAULTS_REGEX.test(urlParts.pathname)) {
      if (request.method === 'DELETE') {
        faultId = querystring.unescape(FAULTS_REGEX.exec(urlParts.pathname)[1]);
        deviceId = faultId.split(':', 1)[0];
        channel = faultId.slice(deviceId.length + 1);
        return db.faultsCollection.remove({
          _id: faultId
        }, function (err) {
          if (err) {
            return throwError(err, response);
          }
          if (channel.startsWith('task_')) {
            return db.tasksCollection.remove({
              _id: new mongodb.ObjectID(channel.slice(5))
            }, function (err) {
              if (err) {
                return throwError(err, response);
              }
              return db.redisClient.del(deviceId + "_tasks", deviceId + "_faults", function (err) {
                if (err) {
                  return throwError(err, response);
                }
                response.writeHead(200);
                return response.end();
              });
            });
          }
          return db.redisClient.del(deviceId + "_faults", function (err) {
            if (err) {
              return throwError(err, response);
            }
            response.writeHead(200);
            return response.end();
          });
        });
      } else {
        response.writeHead(405, {
          'Allow': 'DELETE'
        });
        return response.end('405 Method Not Allowed');
      }
    } else if (DEVICE_TASKS_REGEX.test(urlParts.pathname)) {
      if (request.method === 'POST') {
        response.writeHead(200, {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        });
        deviceId = querystring.unescape(DEVICE_TASKS_REGEX.exec(urlParts.pathname)[1]);
        if (deviceId.indexOf('-04') > -1 || deviceId.indexOf('-02') > -1) {
          console.log(123)
          if (body.length) {
            data = JSON.parse(body);
            var configUrl = '/var/ConfigSet/' + deviceId + '_config.properties';
            // if (!fs.existsSync(configUrl)) {
            //     fs.mkdirSync(configUrl);
            // }
            fs.writeFileSync(configUrl, data.dataString);
            var metadata = {
              fileType: 'ConfigSet',
              deviceID: deviceId,
              time: new Date()
            }
            gs = new mongodb.GridStore(db.mongoDb, filename, filename, 'w', {
              metadata: metadata
            });
            gs.open(function (err, gs) {
              gs.writeFile(configUrl, function (err, doc) {
                if (err) {
                  var data = {
                    code: 100,
                    message: '任务插入失败' + err
                  }
                  response.end(JSON.stringify(data));
                }
                task = {
                  'name': 'download',
                  'fileType': '3_Vendor_Configuration_File',
                  'fileName': deviceId + '_config.properties'
                }
                return apiFunctions.insertTasks(task, function (err) {
                  if (err) {
                    return throwError(err, response);
                  }
                  return db.redisClient.del(deviceId + "_tasks", function (err) {
                    if (err) {
                      return throwError(err, response);
                    }
                    var data = {
                      code: 200,
                      message: '任务插入成功'
                    }
                    return response.end(JSON.stringify(data));
                  });
                });
              });
            });
          }

        } else {
          console.log(456456)
          if (body.length) {
            task = JSON.parse(body);
            task.device = deviceId;
            return apiFunctions.insertTasks(task, function (err) {
              if (err) {
                return throwError(err, response);
              }
              return db.redisClient.del(deviceId + "_tasks", function (err) {
                if (err) {
                  return throwError(err, response);
                }
                // delete by chenchen 2018/06/15
                // if (urlParts.query.connection_request != null) {
                //       return apiFunctions.connectionRequest(deviceId, function (err) {
                //         if (err) {
                //           response.writeHead(202, err.message, {
                //             'Content-Type': 'application/json',
                //             'Access-Control-Allow-Origin': '*'
                //           });
                //           return response.end(JSON.stringify(task));
                //         } else {
                //           return apiFunctions.watchTask(deviceId, task._id, config.get('DEVICE_ONLINE_THRESHOLD', deviceId), function (err, status) {
                //             if (err) {
                //               return throwError(err, response);
                //             }
                //             if (status === 'timeout') {
                //               response.writeHead(202, 'Task queued but not processed', {
                //                 'Content-Type': 'application/json',
                //                 'Access-Control-Allow-Origin': '*'
                //               });
                //               return response.end(JSON.stringify(task));
                //             } else if (status === 'fault') {
                //               return db.tasksCollection.findOne({
                //                 _id: task._id
                //               }, function (err, task) {
                //                 if (err) {
                //                   return throwError(err, response);
                //                 }
                //                 response.writeHead(202, 'Task faulted', {
                //                   'Content-Type': 'application/json',
                //                   'Access-Control-Allow-Origin': '*'
                //                 });
                //                 return response.end(JSON.stringify(task));
                //               });
                //             } else {
                //               response.writeHead(200, {
                //                 'Content-Type': 'application/json',
                //                 'Access-Control-Allow-Origin': '*'
                //               });
                //               return response.end(JSON.stringify(task));
                //             }
                //           });
                //         }
                //       });
                //     } else {
                response.writeHead(200, {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                });
                var data = {
                  code: 200,
                  message: '任务插入成功'
                }
                return response.end(JSON.stringify(data));
                //return response.end(JSON.stringify(task));
                // }

              });
            });
          } else if (urlParts.query.connection_request != null) {
            return apiFunctions.connectionRequest(deviceId, function (err) {
              if (err) {
                response.writeHead(504);
                response.end(err.name + ": " + err.message);
                return;
              }
              response.writeHead(200);
              return response.end();
            });
          } else {
            response.writeHead(400);
            return response.end();
          }
        }

      } else {
        response.writeHead(405, {
          'Allow': 'POST'
        });
        return response.end('405 Method Not Allowed');
      }
    } else if (TASKS_REGEX.test(urlParts.pathname)) {
      r = TASKS_REGEX.exec(urlParts.pathname);
      taskId = new mongodb.ObjectID(querystring.unescape(r[1]));
      action = r[2];
      var List = JSON.parse(body).List;
      var q = { '_id': taskId, 'state': JSON.parse(body).state }
      if (List != null && List != undefined) {
        var List1 = []
        for (var i = 0; i < List.length; i++) {
          List1.push(new mongodb.ObjectID(List[i]))
        }
        q = { '_id': { $in: List1 }, 'state': JSON.parse(body).state }
      }
      if ((action == null) || action === '/') {
        if (request.method === 'POST') {
          return db.tasksCollection.findOne(q, {
            'device': 1
          }, function (err, task) {
            if (err) {
              return throwError(err, response);
            }
            //deviceId = task.device;
            return db.tasksCollection.remove(q, function (err) {
              if (err) {
                return throwError(err, response);
              }
              response.writeHead(200, { 'Access-Control-Allow-Origin': '*' });
              var data = {
                code: 200,
                message: '任务删除成功'
              }
              return response.end(JSON.stringify(data));
              // return db.faultsCollection.remove({
              //   _id: deviceId + ":task_" + (String(taskId))
              // }, function (err) {
              //   if (err) {
              //     return throwError(err, response);
              //   }
              //   return db.redisClient.del(deviceId + "_tasks", deviceId + "_faults", function (err) {
              //     if (err) {
              //       return throwError(err, response);
              //     }
              //     response.writeHead(200,{'Access-Control-Allow-Origin': '*'});
              //     var data ={
              //       code: 200,
              //       message: '任务删除成功'
              //     }
              //     return response.end(JSON.stringify(data));
              //     //return response.end();
              //   });
              // });
            });
          });
        } else {
          response.writeHead(405, {
            'Allow': 'POST'
          });
          return response.end('405 Method Not Allowed');
        }
      } else if (action === '/retry') {
        if (request.method === 'POST') {
          return db.tasksCollection.findOne({
            '_id': taskId
          }, {
              'device': 1
            }, function (err, task) {
              if (err) {
                return throwError(err, response);
              }
              deviceId = task.device;
              return db.faultsCollection.remove({
                _id: deviceId + ":task_" + (String(taskId))
              }, function (err) {
                if (err) {
                  return throwError(err, response);
                }
                return db.redisClient.del(deviceId + "_faults", function (err) {
                  if (err) {
                    return throwError(err, response);
                  }
                  response.writeHead(200);
                  return response.end();
                });
              });
            });
        } else {
          response.writeHead(405, {
            'Allow': 'POST'
          });
          return response.end('405 Method Not Allowed');
        }
      } else {
        response.writeHead(404);
        return response.end();
      }
    } else if (FILES_REGEX.test(urlParts.pathname)) {
      filename = querystring.unescape(FILES_REGEX.exec(urlParts.pathname)[1]);
      // change by chenchen 2018/06/25
	  console.log(1111)
      //if (request.method === 'PUT') {
      if (request.method === 'POST') {
        if (request.headers.filetype === null || request.headers.filetype === undefined) {
          if (filename.indexOf('Log') > -1) {
            metadata = {
              fileType: 'Log',
              deviceID: filename.split("_")[0],
              time: new Date()
            }
          } else if (filename.indexOf('ConfigBackup') > -1) {
            metadata = {
              fileType: 'ConfigBackup',
              deviceID: filename.split("_")[0],
              time: new Date()
            }
          }else{ // fileupload
            body = JSON.parse(body).data;//
            body = body.split('base64,')[1] // 具体数据
            /*
            var dataBuffer = new Buffer(body, 'base64');
            */
            metadata = {
                  fileType: 'test',
                  deviceID: filename.split("_")[0],
                  time: new Date()
            }
		  }
        } else {
          metadata = {
            fileType: request.headers.filetype,
            oui: request.headers.oui,
            productClass: request.headers.productclass,
            version: request.headers.version
          }
        };
        gs = new mongodb.GridStore(db.mongoDb, filename, filename, 'w', {
          metadata: metadata
        });
        return gs.open(function (err, gs) {
          return gs.write(body, function (err, res) {
            if (err) {
              return throwError(err, response);
            }
            return gs.close(function (err) {
              if (err) {
                return throwError(err, response);
              }
              response.writeHead(201);
              return response.end();
            });
          });
        });
      } else if (request.method === 'GET') {
        q = JSON.parse(urlParts.query.query);
        if (q.list) {
          filename = q.list
        }
        return mongodb.GridStore.unlink(db.mongoDb, filename, function (err) {
          response.writeHead(200, {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
          });
          var data = {
            code: 200,
            message: '日志删除成功'
          }
          if (err) {
            data = {
              code: 201,
              message: '日志删除失败' + err
            }
          }
          response.write(JSON.stringify(data))
          return response.end();
        });
      } else {
        response.writeHead(405, {
          'Allow': 'GET, POST'
        });
        return response.end('405 Method Not Allowed');
      }
    } else if (PING_REGEX.test(urlParts.pathname)) {
      host = querystring.unescape(PING_REGEX.exec(urlParts.pathname)[1]);
      return require('child_process').exec("ping -w 1 -i 0.2 -c 3 " + host, function (err, stdout, stderr) {
        if (err) {
          response.writeHead(404, {
            'Cache-Control': 'no-cache'
          });
          response.end(err.name + ": " + err.message);
          return;
        }
        response.writeHead(200, {
          'Content-Type': 'text/plain',
          'Cache-Control': 'no-cache'
        });
        return response.end(stdout);
      });
    } else if (DELETE_DEVICE_REGEX.test(urlParts.pathname)) {
      if (request.method !== 'POST') {
        response.writeHead(405, {
          'Allow': 'POST'
        });
        response.end('405 Method Not Allowed');
        return;
      }
      deviceId = querystring.unescape(DELETE_DEVICE_REGEX.exec(urlParts.pathname)[1]);
      console.log(deviceId)
      return apiFunctions.deleteDevice(deviceId, function (err) {
        if (err) {
          return throwError(err, response);
        }
        console.log("success")
        //response.writeHead(200);
        response.writeHead(200, {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        });
        var data = {
          code: 200,
          message: '设备删除成功'
        }
        response.write(JSON.stringify(data));
        return response.end();
      });
    } else if (USER_REGEX.test(urlParts.pathname)) {
      var type = querystring.unescape(USER_REGEX.exec(urlParts.pathname)[1]);
      var userInfo = JSON.parse(body);
      if (request.method === 'POST') {
        switch (type) {
          case 'insert':
            cur = db.usersCollection.find({ 'Name': userInfo.Name }, { batchSize: 50 });
            response.writeHead(200, { 'Access-Control-Allow-Origin': '*' });
            var data = {}
            cur.count(false, function (err, total) {
              if (total > 0) {
                data = {
                  code: 100,
                  message: '用户名已存在，添加失败'
                }
                return response.end(JSON.stringify(data));
              } else {
                db.usersCollection.insert({ 'Name': userInfo.Name, 'Password': userInfo.Password, 'roles': userInfo.roles }, function (err, _tasks) {
                  if (err) {
                    data = {
                      code: 100,
                      message: '用户添加失败' + err
                    }
                    return response.end(JSON.stringify(data));
                  }
                  data = {
                    code: 200,
                    message: '用户添加成功'
                  }
                  return response.end(JSON.stringify(data));
                });
              }
            })

            break;
          case 'update':
            db.usersCollection.update({ 'Name': userInfo.Name }, { $set: { 'Password': userInfo.Password } }, function (err, _tasks) {
              if (err) {
                response.writeHead(200, { 'Access-Control-Allow-Origin': '*' });
                var data = {
                  code: 100,
                  message: '用户更新失败' + err
                }
                return response.end(JSON.stringify(data));
              }
              response.writeHead(200, { 'Access-Control-Allow-Origin': '*' });
              var data = {
                code: 200,
                message: '用户密码更新成功'
              }
              return response.end(JSON.stringify(data));
            });
            break;
          case 'delete':
            db.usersCollection.remove({ 'Name': { $in: userInfo.Name } }, function (err, _tasks) {
              if (err) {
                response.writeHead(200, { 'Access-Control-Allow-Origin': '*' });
                var data = {
                  code: 100,
                  message: '用户删除失败' + err
                }
                return response.end(JSON.stringify(data));
              }
              response.writeHead(200, { 'Access-Control-Allow-Origin': '*' });
              var data = {
                code: 200,
                message: '用户删除成功'
              }
              return response.end(JSON.stringify(data));
            });
            break;
        }
      }
    } else if (BACKUP_REGEX.test(urlParts.pathname)) {
      var type = querystring.unescape(BACKUP_REGEX.exec(urlParts.pathname)[1]);
      var backupList = JSON.parse(body);
      console.log(backupList)
      if (request.method === 'POST') {
        switch (type) {
          case 'insert':
            apiFunctions.InsertBackup(function (err) {
              response.writeHead(200, {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              });
              var data = {
                code: 200,
                message: '备份成功'
              }
              if (err) {
                data = {
                  code: 100,
                  message: '备份失败' + err
                }
              }
              return response.end(JSON.stringify(data));
            });
            break
          case 'delete':
            apiFunctions.DeleteBackup(backupList.Path, function (err) {
              response.writeHead(200, {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              });
              var data = {
                code: 200,
                message: '备份删除成功'
              }
              if (err) {
                data = {
                  code: 100,
                  message: '备份删除失败' + err
                }
              }
              return response.end(JSON.stringify(data));

            });
            break
          case 'restore':
            apiFunctions.RestoreBackup(backupList.Path, function (err) {
              response.writeHead(200, {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              });
              var data = {
                code: 200,
                message: '还原成功'
              }
              if (err) {
                data = {
                  code: 100,
                  message: '还原失败' + err
                }
              }
              return response.end(JSON.stringify(data));
            });
            break
        }
      }
    } else if (SYSTELOG_REGEX.test(urlParts.pathname)) {
      var type = querystring.unescape(SYSTELOG_REGEX.exec(urlParts.pathname)[1]);
      var LogData = JSON.parse(body);
      if (request.method === 'POST') {
        switch (type) {
          case 'delete':
            db.systemlogsCollection.remove({}, function (err) {
              response.writeHead(200, {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              });
              var data = {
                code: 200,
                message: '日志清理成功'
              }
              if (err) {
                data = {
                  code: 100,
                  message: '日志清理失败' + err
                }
              }
              return response.end(JSON.stringify(data));
            });
            break;
          case 'insert':
            LogData.Time = new Date();
            db.systemlogsCollection.insert(LogData, function (err) {
              response.writeHead(200, {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              });
              var data = {
                code: 200,
                message: '日志插入成功'
              }
              return response.end(JSON.stringify(data));
            })
            break;
        }
      }
    } else if (QUERY_REGEX.test(urlParts.pathname)) {
      collectionName = QUERY_REGEX.exec(urlParts.pathname)[1];
      collectionDetail = QUERY_REGEX.exec(urlParts.pathname)[2]
      i = collectionName.indexOf('_');
      while (i >= 0) {
        ++i;
        up = i < collectionName.length ? collectionName[i].toUpperCase() : '';
        collectionName = collectionName.slice(0, i - 1) + up + collectionName.slice(i + 1);
        i = collectionName.indexOf('_', i);
      }
      if ((ref = request.method) !== 'GET' && ref !== 'HEAD') {
        response.writeHead(405, {
          'Allow': 'GET, HEAD'
        });
        response.end('405 Method Not Allowed');
        return;
      }
      collection = db[collectionName + "Collection"];
      if (collection == null) {
        response.writeHead(404);
        response.end('404 Not Found');
        return;
      }
      if (urlParts.query.query != null) {
        try {
          q = JSON.parse(urlParts.query.query);
        } catch (error) {
          err = error;
          response.writeHead(400);
          response.end(err.name + ": " + err.message);
          return;
        }
      } else {
        q = {};
      }
      switch (collectionName) {
        case 'devices':
          q = query.expand(q);
          if (urlParts.query.devicestyle == 'TAU') {
            q['$or'] = [{ '_id': { $regex: '-07' } }]
          } else if (urlParts.query.devicestyle == 'CPE') {
            q['$or'] = [{ '_id': { $regex: '-08' } }]
          } else if (urlParts.query.devicestyle == 'CZT') {
            q['$or'] = [{ '_id': { $regex: '-01' } }, { '_id': { $regex: '-02' } }]
            //q['$or'] = [{'_id':{$regex:'CZT'}},{'_id':{$regex:'GDT'}}]
          } else if (urlParts.query.devicestyle == 'GDT') {
            q['$or'] = [{ '_id': { $regex: '-03' } }, { '_id': { $regex: '-04' } }]
          }
          console.log(JSON.stringify(q))
          break;
        case 'deviceTaus':
        case 'deviceCpes':
        case 'deviceCzts':
        case 'deviceGdts':
          q = query.expand(q);
          if (urlParts.query.devicestyle == 'TAU') {
            q['$or'] = [{ '_id': { $regex: '-07' } }]
          } else if (urlParts.query.devicestyle == 'CPE') {
            q['$or'] = [{ '_id': { $regex: '-08' } }]
          } else if (urlParts.query.devicestyle == 'CZT') {
            q['$or'] = [{ '_id': { $regex: '-01' } }, { '_id': { $regex: '-02' } }]
          } else if (urlParts.query.devicestyle == 'GDT') {
            q['$or'] = [{ '_id': { $regex: '-03' } }, { '_id': { $regex: '-04' } }]
          }
          break;
        case 'tasks':
          // q = query.sanitizeQueryTypes(q, {
          //   _id: (function (v) {
          //     return new mongodb.ObjectID(v);
          //   }),
          //   timestamp: (function (v) {
          //     return new Date(v);
          //   }),
          //   retries: Number
          // });
          var q_new = {};
          if (q.device == 'TAU') {
            q_new['$or'] = [{ 'device': { $regex: '-07' } }]
          } else if (q.device == 'CPE') {
            q_new['$or'] = [{ 'device': { $regex: '-08' } }]
          } else if (q.device == 'CZT') {
            q_new['$or'] = [{ 'device': { $regex: '-01' } }, { 'device': { $regex: '-02' } }]
          } else if (q.device == 'GDT') {
            q_new['$or'] = [{ 'device': { $regex: '-03' } }, { 'device': { $regex: '-04' } }]
          } else {
            q_new.device = { $regex: '' }
          }
          if (q.state == 0 || q.state == 1) {
            q_new.state = q.state;
          }
          if (q.from && q.to) {
            q_new.timestamp = { "$gte": new Date(q.from), "$lte": new Date(q.to) };
          }
          q = q_new;
          console.log(q)
          break;
        case 'faults':
          q = query.sanitizeQueryTypes(q, {
            timestamp: (function (v) {
              return new Date(v);
            }),
            retries: Number
          });
          break;
        case 'files':
          var q_new = {};
          if (q.device) {
            q_new = {
              '$and': [{ "_id": { "$regex": q.device } }, { "_id": { "$regex": q.type } }, { "_id": { "$regex": q.style } }],
            }
          } else {
            q_new = {
              '$and': [{ "_id": { "$regex": q.type } }, { "_id": { "$regex": q.style } }],
            }
          }
          if (q.from && q.to) {
            q_new.uploadDate = { "$gte": new Date(q.from), "$lte": new Date(q.to) };
          }
          q = q_new;
          console.log(q)
        case 'users':
          if (collectionDetail == 'userList') {
            var q_new = {}
            q_new.Name = { $regex: q.Name };
            q = q_new;
          } else {
            q = query.sanitizeQueryTypes(q, {});
          }
          break;
        case 'systemlogs':
          var q_new = {};
          if (q.from && q.to) {
            q_new.Time = { "$gte": new Date(q.from), "$lte": new Date(q.to) };
          }
          q = q_new;
          console.log(q)
          break;
      }

      if (urlParts.query.projection != null) {
        projection = {};
        ref1 = urlParts.query.projection.split(',');
        for (j = 0, len = ref1.length; j < len; j++) {
          p = ref1[j];
          p = p.trim();
          projection[p] = 1;
        }
      }
      cur = collection.find(q, projection, {
        batchSize: 50
      });
      if (urlParts.query.sort != null) {
        s = JSON.parse(urlParts.query.sort);
        sort = {};
        for (k in s) {
          v = s[k];
          if (k[k.lastIndexOf('.') + 1] !== '_' && collectionName === 'devices') {
            sort[k + "._value"] = v;
          } else {
            sort[k] = v;
          }
        }
        cur.sort(sort);

      }
      if (urlParts.query.skip != null) {
        cur.skip(parseInt(urlParts.query.skip));
      }
      if (urlParts.query.limit != null) {
        cur.limit(limit = parseInt(urlParts.query.limit));
      }
      switch (collectionName) {
        case 'files':
          var responseData = { data: [] };
          cur.sort({ 'uploadDate': -1 });
          return cur.count(false, function (err, total) {
            response.writeHead(200, {
              'Content-Type': 'application/json',
              'total': total,
              'Access-Control-Allow-Origin': '*'
            });
            if (request.method === 'HEAD') {
              response.end();
              return;
            }
            // response.write("{");
            // response.write('"total":'+total)
            // response.write(',"data":[');
            responseData.total = total;
            i = 0;
            return cur.each(function (err, item) {
              if (err) {
                throwError(err, response);
                return false;
              }
              if (item != null) {
                // if (i++) {
                //    response.write(",");
                // }
                switch (collectionDetail) {
                  case 'LogList':
                    responseData.data.push(MakeData.LogList(item)); break;
                  case 'BackupList':
                    responseData.data.push(MakeData.BackupList(item)); break;
                  //response.write(MakeData.LogList(item)); break;
                }
                // response.write(JSON.stringify(item));
              }
              if ((item == null) || ((limit != null) && i >= limit)) {
                return response.end(JSON.stringify(responseData));
              }
            });
          });
          break;
        case 'tasks':
          var responseData = { data: [] };
          cur.sort({ 'timestamp': 1 });
          return cur.count(false, function (err, total) {
            response.writeHead(200, {
              'Content-Type': 'application/json',
              'total': total,
              'Access-Control-Allow-Origin': '*'
            });
            if (request.method === 'HEAD') {
              response.end();
              return;
            }
            responseData.total = total;
            // response.write("{");
            // response.write('"total":'+total)
            // response.write(',"data":[');
            i = 0;
            return cur.each(function (err, item) {
              if (err) {
                throwError(err, response);
                return false;
              }
              if (item != null) {
                // if (i++) {
                //    response.write(",");
                // }
                switch (collectionDetail) {
                  case 'currentList':
                    console.log(234234234)
                    responseData.data.push(MakeData.CurrentList(item)); break;
                  //response.write(MakeData.CurrentList(item)); break;
                  case 'historyList':
                    responseData.data.push(MakeData.CurrentList(item)); break;
                  //response.write(MakeData.CurrentList(item)); break;
                }
                // response.write(JSON.stringify(item));
              }
              if ((item == null) || ((limit != null) && i >= limit)) {
                //response.write(JSON.stringify(responseData));
                return response.end(JSON.stringify(responseData));
              }
            });
          });
          break;
        case 'devices':
          var responseData = { data: [] };
          return cur.count(false, function (err, total) {
            response.writeHead(200, {
              'Content-Type': 'application/json',
              'total': total,
              'Access-Control-Allow-Origin': '*'
            });
            if (request.method === 'HEAD') {
              response.end();
              return;
            }
            responseData.total = total;
            // response.write("{");
            // response.write('"total":'+total)
            // response.write(',"data":[');
            i = 0;
            var TAU = [];
            var CPE = [];
            var CZTMaster = [];
            var CZTControl = [];
            var GDTMaster = [];
            var GDTControl = [];
            cur.sort({ '_id': 1 });
            return cur.each(function (err, item) {
              if (err) {
                throwError(err, response);
                return false;
              }
              if (item != null) {
                // if (i++) {
                //   if(collectionDetail != 'devicesNameList'){
                //    response.write(",");
                //   }
                // }
                if (collectionName == 'devices') {
                  switch (collectionDetail) {
                    case 'devicesListTAU':
                      responseData.data.push(MakeData.DeviceListTAU(item)); break;
                    //response.write(MakeData.DeviceListTAU(item)); break;
                    case 'devicesListCZT':
                      responseData.data.push(MakeData.DeviceListCZT(item)); break;
                    //response.write(MakeData.DeviceListCZT(item)); break;
                    case 'devicesNameList':
                      if (item._id) {
                        if (item._id.indexOf("-07") > -1) {
                          TAU.push({ 'value': item._id, 'label': item._id })
                        } else if (item._id.indexOf("-08") > -1) {
                          CPE.push({ 'value': item._id, 'label': item._id })
                        } else if (item._id.indexOf("-01") > -1) {
                          CZTMaster.push({ 'value': item._id, 'label': item._id })
                        } else if (item._id.indexOf("-02") > -1) {
                          CZTControl.push({ 'value': item._id, 'label': item._id })
                        } else if (item._id.indexOf("-03") > -1) {
                          GDTMaster.push({ 'value': item._id, 'label': item._id })
                        } else if (item._id.indexOf("-04") > -1) {
                          GDTControl.push({ 'value': item._id, 'label': item._id })
                        }
                      }
                      break;
                    case 'devicesDetailTAU':
                      responseData.data.push(MakeData.DeviceDetailTAU(item)); break;
                    // response.write(MakeData.DeviceDetailTAU(item)); break;
                    case 'devicesDetailCZT':
                      responseData.data.push(MakeData.DeviceDetailCZT(item)); break;
                    //response.write(MakeData.DeviceDetailCZT(item)); break;
                  }
                }
                // response.write(JSON.stringify(item));
              }
              if ((item == null) || ((limit != null) && i >= limit)) {
                if (collectionDetail === 'devicesNameList') {
                  var list = []
                  list.push({ 'value': 'TAU', 'label': 'TAU', 'children': TAU })
                  list.push({ 'value': 'CPE', 'label': 'CPE', 'children': CPE })
                  list.push({ 'value': 'CZT', 'label': '车载台', 'children': [{ 'value': '-01', 'label': '车载台主机', 'children': CZTMaster }, { 'value': '-02', 'label': '车载台控制盒', 'children': CZTControl }] })
                  list.push({ 'value': 'GDT', 'label': '固定台', 'children': [{ 'value': '-03', 'label': '固定台主机', 'children': GDTMaster }, { 'value': '-04', 'label': '固定台控制盒', 'children': GDTControl }] })
                  return response.end(JSON.stringify(list))
                } else {
                  return response.end(JSON.stringify(responseData))
                }
              }
            });
          });
          break;
        case 'deviceTaus':
        case 'deviceCpes':
          var responseData = { data: [] };
          response.writeHead(200, {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
          });
          // response.write("{");
          // response.write('"data":[');
          switch (collectionDetail) {
            case 'PerformList':
              var deviceList = [];
              cur1 = db["devicesCollection"].find(q, projection, { batchSize: 50 });
              cur1.sort({ '_id': 1 });
              cur1.each(function (err, item1) {
                if (err) {
                  throwError(err, response);
                  return false;
                }
                if (item1 != null) {
                  deviceList.push(item1._id)
                } else {
                  var length = 0;
                  async.each(deviceList, function (item2, callback) {
                    var query2 = {}
                    query2 = { deviceId: item2 }

                    cur = collection.find(query2, projection, { batchSize: 50 });
                    cur.sort(sort);
                    cur.limit(limit = 30)
                    cur.sort({ 'timestamp': 1 });
                    var Menery = [];
                    var Tempate = [];
                    var Time = [];
                    var data = {};
                    var deviceIdList = [];

                    cur.each(function (err, item) {
                      if (err) {
                        throwError(err, response);
                        return false;
                      }
                      if (item != null) {
                        var datalist = MakeData.DevicesTausPerformList(item);
                        var deviceId = datalist.deviceId
                        if (data[deviceId] === undefined) {
                          data[deviceId] = {
                            'deviceId': deviceId,
                            'Time': [],
                            'Memery': [],
                            'Tempate': [],
                            'List': ['Memery(%)', 'Tempate(℃)'],
                          }
                        }
                        data[deviceId].Time.push(datalist.Time);
                        data[deviceId].Memery.push(datalist.Memery);
                        data[deviceId].Tempate.push(datalist.Tempate);
                        // if(data[deviceId].List.length==0){
                        //   data[deviceId].List.push(datalist.List);
                        // }
                      }
                      if ((item == null)) {
                        if (data[item2] == undefined) {
                          data[item2] = {
                            'deviceId': deviceId,
                            'Time': [],
                            'Memery': [],
                            'Tempate': [],
                            'List': ['Memery(%)', 'Tempate(℃)']
                          }
                        }
                        var responseDataEach;
                        responseDataEach = {
                          'deviceId': item2,
                          'dataList': {
                            'Time': data[item2].Time,
                            'Memery(%)': data[item2].Memery,
                            'Tempate(℃)': data[item2].Tempate,
                            'List': data[item2].List
                          }
                        }
                        length = length + 1;
                        responseData.data.push(responseDataEach)
                        // if(item2 != null){
                        //      response.write(",");
                        //  }
                        if (length == deviceList.length) {
                          console.log(JSON.stringify(responseData))
                          return response.end(JSON.stringify(responseData));
                        }
                      }
                    });

                  }, function (err) {
                    var responseData = {
                      code: 100,
                      message: '列表为空'
                    }
                    response.end(JSON.stringify(responseData));
                  });
                }
              });
              break;
            case 'PerformDetail':
              var query2 = { deviceId: JSON.parse(urlParts.query.query).deviceId }
              cur = collection.find(query2, projection, { batchSize: 50 });
              cur.sort({ 'timestamp': -1 });
              cur.limit(limit = 1)
              cur.each(function (err, item) {
                if (err) {
                  throwError(err, response);
                  return false;
                }
                if (item != null) {
                  responseData.data.push(item)
                  //response.write(JSON.stringify(item));
                }
                if ((item == null)) {
                  return response.end(JSON.stringify(responseData));
                }
              });
              break;

          }
          break;
        case 'deviceCzts':
        case 'deviceGdts':
          var responseData = { data: [] };
          response.writeHead(200, {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
          });
          // response.write("{");
          // response.write('"data":[');
          switch (collectionDetail) {
            case 'PerformList':
              var deviceList = [];
              cur1 = db["devicesCollection"].find(q, projection, { batchSize: 50 });
              cur1.sort({ '_id': 1 });
              cur1.each(function (err, item1) {
                if (err) {
                  throwError(err, response);
                  return false;
                }
                if (item1 != null) {
                  deviceList.push(item1._id)
                } else {
                  var length = 0;
                  async.each(deviceList, function (item2, callback) {
                    var query2 = {}
                    query2 = { deviceId: item2 }

                    cur = collection.find(query2, projection, { batchSize: 50 });
                    cur.sort(sort);
                    cur.limit(limit = 30)
                    cur.sort({ 'timestamp': 1 });
                    var Sdfree = [];
                    var Memfree = [];
                    var Intensity = [];
                    var Time = [];
                    var data = {};
                    var deviceIdList = [];
                    cur.each(function (err, item) {
                      if (err) {
                        throwError(err, response);
                        return false;
                      }
                      if (item2.indexOf("-02") > -1 || item2.indexOf("-04") > -1) {
                        if (item != null) {
                          var datalist = MakeData.DevicesCztsPerformList_control(item);
                          var deviceId = datalist.deviceId
                          if (data[deviceId] === undefined) {
                            data[deviceId] = {
                              'deviceId': deviceId,
                              'Time': [],
                              'RamFree': [],
                              'InternalStorageFree': [],
                              'ExternalStorageFree': [],
                              'Memfree': [],
                              'Intensity': [],
                              'Status': [],
                              'List': ['RamFree(M)', 'InternalStorageFree(M)', 'ExternalStorageFree(M)', 'Memfree(M)', 'Intensity'],
                            }
                          }
                          data[deviceId].Time.push(datalist.Time);
                          data[deviceId].RamFree.push(datalist.RamFree);
                          data[deviceId].InternalStorageFree.push(datalist.InternalStorageFree);
                          data[deviceId].ExternalStorageFree.push(datalist.ExternalStorageFree);
                          data[deviceId].Memfree.push(datalist.Memfree);
                          data[deviceId].Intensity.push(datalist.Intensity)
                          data[deviceId].Status.push(datalist.Status);;
                          // if(data[deviceId].List.length==0){
                          //   data[deviceId].List.push(datalist.List);
                          // }
                        }
                        if ((item == null)) {
                          if (data[item2] == undefined) {
                            data[item2] = {
                              'deviceId': deviceId,
                              'Time': [],
                              'RamFree': [],
                              'InternalStorageFree': [],
                              'ExternalStorageFree': [],
                              'Memfree': [],
                              'Intensity': [],
                              'Status': [],
                              'List': ['RamFree(M)', 'InternalStorageFree(M)', 'ExternalStorageFree(M)', 'Intensity']
                            }
                          }
                          var responseDataEach;
                          responseDataEach = {
                            'deviceId': item2,
                            'dataList': {
                              'Time': data[item2].Time,
                              'RamFree(M)': data[item2].RamFree,
                              'InternalStorageFree(M)': data[item2].InternalStorageFree,
                              'ExternalStorageFree(M)': data[item2].ExternalStorageFree,
                              'Memfree(M)': data[item2].Memfree,
                              'Intensity': data[item2].Intensity,
                              'Status': data[item2].Status,
                              'List': data[item2].List
                            }
                          }
                          length = length + 1;
                          responseData.data.push(responseDataEach)
                          //response.write(JSON.stringify(responseDataEach))
                          // if(item2 != null){
                          //      response.write(",");
                          //  }
                          if (length == deviceList.length) {
                            return response.end(JSON.stringify(responseData));
                          }
                        }
                      } else if (item2.indexOf("-01") > -1 || item2.indexOf("-02") > -1) {
                        if (item != null) {
                          var datalist = MakeData.DevicesCztsPerformList_master(item);
                          var deviceId = datalist.deviceId
                          if (data[deviceId] === undefined) {
                            data[deviceId] = {
                              'deviceId': deviceId,
                              'Time': [],
                              'memory': [],
                              'disk': [],
                              'diskPerc': [],
                              'List': ['memory(M)', 'disk(M)', 'diskPerc'],
                            }
                          }
                          data[deviceId].Time.push(datalist.Time);
                          data[deviceId].memory.push(datalist.memory);
                          data[deviceId].disk.push(datalist.disk);
                          data[deviceId].diskPerc.push(datalist.diskPerc)
                          // if(data[deviceId].List.length==0){
                          //   data[deviceId].List.push(datalist.List);
                          // }
                        }
                        if ((item == null)) {
                          if (data[item2] == undefined) {
                            data[item2] = {
                              'deviceId': deviceId,
                              'Time': [],
                              'memory': [],
                              'disk': [],
                              'diskPerc': [],
                              'List': ['memory(M)', 'disk(M)', 'diskPerc']
                            }
                          }
                          var responseDataEach;
                          responseDataEach = {
                            'deviceId': item2,
                            'dataList': {
                              'Time': data[item2].Time,
                              'memory(M)': data[item2].Sdfree,
                              'disk(M)': data[item2].Memfree,
                              'diskPerc': data[item2].Intensity,
                              'List': data[item2].List
                            }
                          }
                          length = length + 1;
                          responseData.data.push(responseDataEach)
                          //response.write(JSON.stringify(responseDataEach))
                          // if(item2 != null){
                          //      response.write(",");
                          //  }
                          if (length == deviceList.length) {
                            return response.end(JSON.stringify(responseData));
                          }
                        }
                      }
                    });

                  }, function (err) {
                    var responseData = {
                      code: 100,
                      message: '列表为空'
                    }
                    response.end(JSON.stringify(responseData));
                  });
                }
              });
              break;

          }
          break;
        case 'users':
          var responseData = { data: [] };
          return cur.count(false, function (err, total) {
            response.writeHead(200, {
              'Content-Type': 'application/json',
              'total': total,
              'Access-Control-Allow-Origin': '*'
            });
            switch (collectionDetail) {
              case 'login':
                var i = 0;
                if (total == 0) {
                  response.end(JSON.stringify({ code: 100, message: '用户名或密码错误，请重试' }))
                } else {
                  cur.each(function (err, item) {
                    if (i == 0) {
                      i++;
                      response.end(JSON.stringify({ code: 200, message: '验证成功', data: { roles: item.roles, Name: item.Name } }))
                    }
                  })
                }
                break;
              case 'userList':
                var responseData = { data: [] };
                responseData.total = total;
                cur.each(function (err, item) {
                  if ((item == null) || ((limit != null) && i >= limit)) {
                    return response.end(JSON.stringify(responseData));
                  }
                  responseData.data.push(MakeData.UserList(item))

                })
                break;
              case 'userDetail':
                var i = 0;
                if (total == 0) {
                  response.end(JSON.stringify({ code: 100, message: '查询失败，请重试！！' }))
                } else {
                  cur.each(function (err, item) {
                    if (i == 0) {
                      i++;
                      response.end(JSON.stringify({ code: 200, message: '验证成功', data: item }))
                    }
                  })
                }
                break;

            }

          })
          break;
        case 'backups':
          cur.sort({ 'date': 1 });
          var responseData = { data: [] };
          return cur.count(false, function (err, total) {
            response.writeHead(200, {
              'Content-Type': 'application/json',
              'total': total,
              'Access-Control-Allow-Origin': '*'
            });
            var responseData = { data: [] };
            responseData.total = total;
            cur.each(function (err, item) {
              if ((item == null) || ((limit != null) && i >= limit)) {
                return response.end(JSON.stringify(responseData));
              }
              responseData.data.push(MakeData.BackupList(item));
            })
          });
          break;
        case 'systemlogs':
          var responseData = { data: [] };
          cur.sort({ 'Time': -1 });
          return cur.count(false, function (err, total) {
            response.writeHead(200, {
              'Content-Type': 'application/json',
              'total': total,
              'Access-Control-Allow-Origin': '*'
            });
            var responseData = { data: [] };
            responseData.total = total;
            cur.each(function (err, item) {
              if ((item == null) || ((limit != null) && i >= limit)) {
                return response.end(JSON.stringify(responseData));
              }
              responseData.data.push(MakeData.SystemLogsList(item));
            })
          });
          break;
      }
    } else if (UPGRADES_REGEX.test(urlParts.pathname)) { // 设备升级 add by liuyang 2018/7/10
      console.log('#debug Upgrades Devices')
      let operationName = querystring.unescape(UPGRADES_REGEX.exec(urlParts.pathname)[1])
      console.log('#debug operationName = ' + operationName)

      // 查询： 按照设备编码查询固件信息
      // 注： HTTP方法 if (request.method === 'POST') {}
      if (operationName === 'query') {
        console.log('#debug query')
        upgrades.query(request, response, body)
      }

      // 查询： 获取目标设备列表
      if (operationName === 'getdevicelist') {
        console.log('#debug getdevicelist TODO')
        // TODO upgrades.getDeviceList(request, response)
      }

      // 上传
      if (operationName === 'upload') {
        console.log('#debug upload')

        if (request.method === 'OPTIONS') {
          upgrades.options(request, response)
        }

        if (request.method === 'POST') {
          upgrades.upload(request, response, body)
        }
      }

      // 升级设备
      if (operationName === 'upgrade') {
        console.log('#debug upgrade')
        // TODO upgrades.doUpgrade(request, response)
      }

      // 删除固件
      if (operationName === 'delete') {
        console.log('#debug delete')
        upgrades.deleteFile(request, response, body)
      }
    } else {
      response.writeHead(404);
      return response.end('404 Not Found');
    }
  });
};
exports.listener = listener;
